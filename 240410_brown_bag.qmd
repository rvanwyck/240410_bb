---
title: "240410 Brown Bag"
format: html
author: "rebecca"
markdown: 
    wrap: 72
---

# Commit - Pull - Push

## Connecting GitHub to RStudio for Reproducible Research

**Note:** Brown Bag attendees will learn more from my presentation if they 1) bring their laptop or follow along on Zoom, 2) have [RStudio](https://posit.co/download/rstudio-desktop/) loaded already to their machine, and 3) have a [GitHub](https://github.com/) account already. Make sure that Git is either installed on your system or the path to the Git executable is added to your system's PATH environment variable.

**Subnote on YAML:**

YAML Is the document’s metadata which sets guidelines on how your want the output of your document to look like. It is located at the top of your file, delineated by three dashes (`---`) at the top and at the bottom of it. It can be used to specify:

-   Characteristics of your documents such at title, author, date of creation.

-   Argument to pass on the building process to control the format of the output.

-   Add additional information such as the bibliography file (and formatting of the references)

-   Specific parameters for your report (eg: just used a subset of the data).

**Best Practice**

It is generally good practice to include all of your `library()` calls in a single, dedicated R chunk near the top of your document. This lets collaborators know what packages they might need to install before they start running your code.

# What is Reproducible Research?

Reproducible analysis allow you to automatize how the figures and the statistics in your analysis are generated. This process also helps your collaborators, your readers and your future self to follow your code trail the leads to the original data, increasing the transparency of your science.

Literate analysis help reduce the mistakes from copying and pasting across software, keeps results and models in sync, and allows you to provide interested readers with more information about the different approaches and analyses you tried before coming up with the final results (British Ecological Society ([2017](https://learning.nceas.ucsb.edu/2024-02-arctic/session_03.html#ref-britecolsoc2017))).

Every file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when bugs are discovered. Sometimes those fixes lead to even more bugs, leading to more changes in the code base. Data files get combined together. Sometimes those same files are split and combined again. In just one research project, we can expect thousands of changes to occur.

These changes are important to track, and yet, we often use simplistic file names to do so. Many of us have experienced renaming a document or script multiple times with the ingenuine addition of “final” to the file name (like the comic above demonstrates).

You might think there is a better way, and you’d be right: **version control**. Version control provides an organized and transparent way to track changes in code and additional files. This practice was designed for software development, but is easily applicable to scientific programming.

There are many benefits to using a version control software including:

-   **Maintain a history** of your research project’s development while keeping your workspace clean

-   **Facilitate collaboration** and transparency when working on teams

-   **Explore bugs or new features** without disrupting your team members’ work

-   and more!

The version control system we’ll be diving into is Git, the most widely used modern version control system in the world.

# Checking and Installing Git

## Check if Git is Installed

First, ensure that Git is indeed installed on your computer. You can do this by trying to run `git --version` in your terminal or command prompt. If Git is installed, this command will return the version of Git you have installed.

## Install Git

If Git is not installed, you'll need to download and install it. You can download Git from [git-scm.com](https://git-scm.com). During the installation process, there is an option to add Git to your PATH. Make sure this option is selected.

# Add Git to PATH Manually

If Git is installed but not recognized, you might need to add Git to your system's PATH manually. The PATH is an environment variable that lists the directories the operating system should look in for executable files.

# Git Installation Guide

## For Windows

### Verify Git Installation

Make sure Git is installed on your computer. You can download it from [git-scm.com](https://git-scm.com).

### Locate Git Installation Path

Find where Git is installed. The default path is usually `C:\\Program Files\\Git`.

### Edit System PATH

-   Open the Start Search, type in "env", and choose "Edit the system environment variables".
-   In the System Properties window, click on the "Environment Variables..." button.
-   In the Environment Variables window, under "System variables", find and select the "Path" variable, then click "Edit".
-   In the Edit Environment Variable window, click "New" and add the Git installation path followed by `\\bin`. For example, `C:\\Program Files\\Git\\bin`.
-   Click "OK" to close all windows and apply the changes.

### Restart Your Computer

For the changes to take effect, you might need to restart your computer.

## For macOS/Linux

### Check Git Installation

Typically, Git is already installed on macOS and most Linux distributions. You can verify this by running `git --version` in the terminal.

### Update PATH if Necessary

-   Open your terminal.
-   Edit your shell profile file (like `.bash_profile`, `.bashrc`, or `.zshrc`) using a text editor (e.g., `nano ~/.bash_profile`).
-   Add a line like `export PATH="/usr/local/bin:$PATH"` (adjust the path if Git is installed in a different location).
-   Save the file and run `source ~/.bash_profile` to apply the changes.

### Verify the Change

Reopen the terminal and type `git --version` to check if Git is now recognized.

## Restart Terminal

After installing Git or modifying the PATH, you may need to restart your terminal or command prompt for the changes to take effect.

## Using Git

Once Git is properly installed and recognized by your system, you should be able to run the `git config --global user.name "rvanwyck"` command without any issues. This command sets your username in the global Git configuration, which is used to identify you in your commits.

### Make sure that your working directory is set in RStudio

```{r}
getwd()

## If the result is not what you want reset your working directory
## setwd("X:/YOUR PREFERED WORKING DIRECTORY")
```

If you're encountering an error when using **'usethis::create_package()'** in RStudioX, it could be due to several reasons. The **'create_package()'** function from the usethis package is designed to set up a new R package structure for you.

**Package Installation:** Ensure that the **'usethis'** package is correctly installed. If not, you can install it using:

```{r}
## install.packages("usethis")
```

To configure your global options in Git, especially within the context of R package development, you can use the **'usethis'** package. The **'usethis'** package allows you to set personal defaults for various settings. For example, you can specify defaults for your role as a package maintainer or for your preferred license in the **'.Rprofile'** file.

```{r}
options(
  usethis.description = list(
    `Authors@R` = 'person("Jane", "Doe", email = "jane@example.com")'
  )
)
```

# Set Up Global Options in Git

Before using Git, you need to tell it who you are, also known as setting the global options. To do this, we will be setting the global options in the Terminal.

## What’s the Terminal?

Technically, the Terminal is an interface for the shell, a computer program. To put that simply, we use the Terminal to tell a computer what to do. This is different from the Console in RStudio, which interprets R code and returns a value.

## Opening a Terminal in RStudio

To get started, let’s open a new Terminal window in RStudio. Do this by clicking `Tools > Terminal > New Terminal`.

A Terminal tab should now be open where your Console usually is.

## Dipping Your Toes in the Terminal

Most of our Git operations will be done in RStudio, but there are some situations where you must work in the Terminal and use command line. It may be daunting to code in the Terminal, but as your comfort increases over time, you might find you prefer it. Either way, it’s beneficial to learn enough command line and to feel comfortable in the Terminal.

## Configuring Git

Let’s start by adding your user name to the global options. Type the following into the command prompt, with your exact GitHub username, and press enter:

```{r}
## git config --global user.name "my_user_name"
```

Note that if the code ran successfully, it will look like nothing happened. We will check at the end to make sure it worked.

Next, enter the following line, with the email address you used when you created your account on [github.com](www.github.com):

```{r}
## git config --global user.email "my_email@alaska.edu"
```

# Setting Up Git Credentials

Next, we will set our credentials to not time out for a very long time. This is related to how our server operating system handles credentials - not doing this will make your Personal Access Token (PAT, which we will set up in the next section) expire immediately on the system, even though it is actually valid for at least a month.

## When Setting up Git and GitHub on Your Personal Computer

You will not need to run the `git config` line below to set the cache. This is a specific configuration for the RStudio Server we are working on.

```{r}
## git config --global credential.helper 'cache --timeout=10000000'
```

Next, we will set the default branch name to `main` for any new repositories that are created moving forward. Why are we doing this? Previously, the default branch name was `master` and this racist terminology for Git branches motivates us to update our default branch to `main` instead.

```{r}
## git config --global init.defaultBranch main
```

Finally, check to make sure everything looks correct by entering this command, which will return the global options you have set.

```{r}
## git config --global --list
```

## 2.2.2 GitHub Authentication

GitHub recently deprecated password authentication for accessing repositories, so we need to set up a secure way to authenticate.

The book [*Happy Git and GitHub for the useR*](https://happygitwithr.com/) has a wealth of information related to working with Git in R, and these instructions are based off of [Chapter 9: Personal Access Token for HTTPS](https://happygitwithr.com/https-pat.html).

We will be using a **Personal Access Token (PAT)** in this course. For better security and long term use, we recommend taking the extra steps to set up SSH keys (check out [Chapter 10 Set up Keys for SSH](https://happygitwithr.com/ssh-keys.html)).

### Setting Up Your PAT

-   Run `usethis::create_github_token()` in the Console.
-   A new browser window should open up to GitHub, showing all the scopes options. Using `create_github_token()` automatically pre-selects some recommended scopes. Scroll to the bottom and click “Generate Token”.
-   Copy the generated token.
-   Back in RStudio, run `gitcreds::gitcreds_set()` in the Console.
-   Paste your PAT when prompted.
-   Last thing, run `usethis::git_sitrep()` in the Console to check your Git configuration and confirm that you’ve successfully stored your PAT.

Congrats! Now you’ve set up your authentication, and you should be able to work with GitHub in RStudio.

> **Note:** For better security and long term use, we recommend taking the extra steps to set up SSH keys (check out Chapter 10 Set up Keys for SSH in the book *Happy Git and GitHub for the useR*).

# Organizing an R Project

When starting a new research project, one of the first things I do is create an R Project for it (just like we have here!). The next step is to then populate that project with relevant directories. There are many tools out there that can do this automatically. Some examples are `rrtools` or `usethis::create_package()`. The goal is to organize your project so that it is a compendium of your research. This means that the project has all of the digital parts needed to replicate your analysis, like code, figures, the manuscript, and data access.

## Common Directories

-   **data**: This is where we store our data. It often contains subdirectories for raw, processed, and metadata data.
-   **R**: Contains scripts for cleaning or wrangling, etc. If your work includes scripts beyond the R programming language, this directory can be misleading, and you might prefer to call it `scripts`.
-   **plots** or **figs**: This is for generated plots, graphs, and figures.
-   **docs**: Here, you can put summaries or reports of analysis or other relevant project information.

Directory organization will vary from project to project, but the ultimate goal is to create a well-organized project that supports both reproducibility and collaboration.

Git resources Pro Git Book Happy Git and GitHub for the useR GitHub Documentation Learn Git Branching is an interactive tool to learn Git on the command line Software Carpentry Version Control with Git Bitbucket’s tutorials on Git Workflows

# Set up a Quarto Document:

**\
Setup**

-   Open a new Quarto file using the following prompts: File \> New File \> Quarto Document

-   A popup window will appear.

-   Give your file a new title, e.g “Introduction to Quarto”.

-   Leave the output format as HTML and Engine set to Knitr.

-   Then click the “Create” button.

The first thing to notice is that by opening a file, we see the fourth pane of the RStudio pops up. This is our Quarto document which is essentially a text editor. We also see in the upper left side that we are looking at the document under the “Visual editor”. This is probably a familiar way of looking at a text document. To introduce the **markdown** syntax, we re going to move to the source editor and then come back to the visual editor. In the upper left corner, click on Source. See how the formatting changed? In the Source editor we are looking at the same text, but in markdown syntax. The visual editor on the other hand, allows us to see how markdown is rendered, therefore how is it going to look in our output document.

## Render the Quarto document

Let’s go ahead and render this file by clicking the “Render” button, next to the blue arrow at the top of the Quarto file. When you first click this button, RStudio will prompt you to save this file. Save it in the top level of your home directory on the server, and name it something that you will remember (like `quarto-intro.Rmd`).

Notice how the grey **R code chunks** are surrounded by 3 back-ticks and `{r LABEL}`. The first chunk, in this case `1+1`, is evaluated and return the output number (2). Notice the line in the second chunk that says `#| echo: false`? This is a code chunk option that indicates not to print the code. In the rendered version, we can see the outcome of `2*2` but not the executed code that created the outcome.

The table below show some of the options available to customizing outputs ([Quarto.org](https://quarto.org/docs/computations/execution-options.html)).

|               |                                                                                                                                             |
|------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|               | Code chunk options                                                                                                                          |
| Option        | Description                                                                                                                                 |
| `#| eval:`    | Evaluate the code chunk (if `false`, just echos the code into the output).                                                                  |
| `#| echo:`    | Include the source code in output                                                                                                           |
| `#| warning:` | Include warnings in the output.                                                                                                             |
| `#| error:`   | Include warnings in the output.                                                                                                             |
| `#| include:` | Catch all for preventing any output (code or results) from being included (e.g.`include: false` suppresses all output from the code block). |

Note that you can also combine these options by adding more than one to a code chunk.

## **Adding citations**

To add a citation, go to the visual editor and in the insert drop down, select “Citation.” In the window that appears, there are several options in the left hand panel for the source of your citation. If you have a citation manager, such as Zotero, installed, this would be included in that list. For now, select “From DOI”, and in the search bar enter a DOI of your choice (e.g.: 10.1038/s41467-020-17726-z), then select “Insert.”

After selecting insert, a couple of things happen. First, the citation reference is inserted into your markdown text as `[@oke2020]`. Second, a file called references.bib containing the BibTex format of the citation is created. Third, that file is added to the YAML header of your Quarto document (`bibliography: references.bib`). Adding another citation will automatically update your `references.bib` file. So easy!

Every time when opening a new Quarto document we should start by deleting all template text (everything except for the YAML). Then we save the document into the most convenient folder of our project. Now we are ready to start our work.

You can create a new chunk in your Quarto in one of these ways:

-   Go to Code in the top menu bar, click “Insert Chunk”

-   Type by hand `{r}`

-   Use the keyboard shortcut

    -   Mac:`command` + `option` + `i`

    -   Windows: `Ctrl` + `Alt` + `i`

### **About code chunks**

Each code chunk needs to have an opening syntax \`\`\``{r}` and a closing syntax \`\`\`. Everything in between these lines will be identified as R code. Let’s start by creating a new R chunk and run the following functions. Because this just an exploration and we do not want this chunk to be part of our report, we will indicate that by adding `#|eval: false` and `#| echo: false` in the setup of the chunk, that way, the code in this chunk will not run and not be displayed when I knit the final document.

**Best Practice**

It is generally good practice to include all of your `library()` calls in a single, dedicated R chunk near the top of your document. This lets collaborators know what packages they might need to install before they start running your code.

## **Additional Quarto Resources**

-   Posit (the organization that developed Quarto) has great documentation, check out [Quarto.org](https://quarto.org/)

-   R for Data Science (2e) (Wickham et al, 2023), this is an awesome book for all R related things. Chapter [29 and 30](https://r4ds.hadley.nz/quarto.html) are specific to Quarto.

-   [Quarto Gallery:](https://quarto.org/docs/gallery/) Example of different outputs created using Quarto

-   [Hello Quarto: share, collaborate, teach, reimagine](https://openscapes.org/blog/2022-08-10-quarto-keynote/). A talk by Julia Stewart Lowndes and Mine Cetinkaya-Runde.
